# -*- coding: utf-8 -*-
"""
Created on Fri Dec 30 03:06:41 2022

@author: Bassel
"""
import random

import numpy as np
import matplotlib.pyplot as plt
from spatialmath import *
import roboticstoolbox as rtb
import swift

robot = rtb.models.Panda()

def create_points():
    r = 0.15
    #cx, cy, cz = 0, 0, 50
    #cx, cy, cz = np.asarray(robot.fkine(robot.qr-[0,0.5,0,0.5,0,0,0]))[:-1,-1]
    cx, cy, cz = np.asarray(robot.fkine(robot.qr))[:-1,-1]
    n_dots = 20
    rs = [r * random.randint(90,110)/100 for _ in range(n_dots)]
    hs = [random.randint(0,10)/100 for _ in range(n_dots)]
    points_in = np.array([
        [
            cx + r*np.sin(np.deg2rad(angle)),
            cy + r*np.cos(np.deg2rad(angle)),
            #50 + h
            cz
        ] for angle, r, h in zip(range(0, 360, int(360/n_dots)), rs, hs)
    ]).T
    return points_in


def sol(points):
    points_in=np.asarray(points)
    n_dots=points_in.shape[1]
    cond=points_in[0,0]-points_in[0,1]>0
    p1=np.array([points_in[0,0],points_in[1,0],points_in[2,0]])
    points_sh=np.insert(points_in.T,0,p1,axis=0).T
    points_extended=np.insert(points_in.T,n_dots,p1,axis=0).T
    points_vec=points_extended[:,1:]-points_sh[:,1:]
    mul=points_vec*points_vec
    #points_vec[2]=np.sqrt(mul[0]+mul[1])*np.tan(np.deg2rad(-45))
    points_vec[2]=np.sqrt(mul[0]+mul[1])*np.tan(np.deg2rad(-45))
    points_abs=np.linalg.norm(points_vec,axis=0)
    points_vec_normalized=points_vec/points_abs
    if cond:
        points_vec_normalized_rotated=np.array(-[points_vec_normalized[1],points_vec_normalized[0],points_vec_normalized[2]])
    else:
        points_vec_normalized_rotated=np.array([points_vec_normalized[1],-points_vec_normalized[0],points_vec_normalized[2]])
    out=np.insert(points_in, 3, points_vec_normalized_rotated,axis=0)
    out_aligned=np.array([out[0,:],out[1,:],out[2,:],out[5,:],out[4,:],out[3,:]])
    thx=np.ones(points.shape[1])*(0)
    thy=np.ones(points.shape[1])*(0)
    #thz=90-np.rad2deg(np.arctan2(points_vec_normalized_rotated[1],points_vec_normalized_rotated[0]))
    thz=np.ones(points.shape[1])*(0)
    return [out, [thx, thy, thz]]

table_coords = np.array([
    [-0.1,0.1,0.5],
    [0.1,0.1,0.5],
    [0.1,-0.1,0.5],
    [-0.1,-0.1,0.5]
])
table_plot = np.stack([
    table_coords[0],
    table_coords[1],
    table_coords[2],
    table_coords[3],
    table_coords[0],
    table_coords[2],
    table_coords[1],
    table_coords[3],
])



points_in=create_points()

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
out, thl=sol(points_in)


env = swift.Swift()
env.launch(realtime=True)

robot.q = robot.qr
env.add(robot)

dt = 0.05
k=-1
count_r=80
for i in range(points_in.T.shape[0]):
    print(i)
    cx, cy, cz, vx, vy, vz=out.T[i]
    #T=SE3(cx, cy, cz) * SE3.RPY([vx, vy, vz], order='xyz')
    T=SE3(cx,cy,cz)*SE3.RPY([thl[0][i], thl[1][i], thl[2][i]], unit='rad', order='xyz')
    arrived = False
    qd=np.zeros(7)
    count=0
    while not arrived:
        if count==count_r:
            break
        count=count+1
        v, arrived = rtb.p_servo(robot.fkine(robot.q), T, 2)
        robot.qd = np.linalg.pinv(robot.jacobe(robot.q)) @ v
        #qd=qd+robot.qd 
        env.step(dt)
    if k==-1:
        k=1
        count_r=2
